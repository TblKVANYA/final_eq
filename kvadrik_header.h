
// Воробьев Иван
// 28.08.2021
// Копирование разрешено, если глазам не больно

//! @file kvadrik_header.h
//! @mainpage
//! kvadrik_header.h
//! \author Vorobev Ivan
//! \data 27.08.2021

#ifndef KVADRIK_KVADRIK_HEADER_H
#define KVADRIK_KVADRIK_HEADER_H

#include <stdio.h>
#include <math.h>
#include <stdlib.h>
#include <assert.h>


//! значения кодов ответов и ошибок, получаемые и при тесте, и пользователем
enum answer{
    UNKNOWN,                   //!< нулевое значение, не должно возвращаться
    QUAD_0SOL,                 //!< квадратное уравнение, не имеет решений
    QUAD_1SOL,                 //!< квадратное уравнение, одно решение
    QUAD_2SOL,                 //!< квадратное уравнение, 2 решения
    LIN_0SOL,                  //!< линейное уравнение, нет решений
    LIN_1SOL,                  //!< линеное уравнение, 1 решение
    LIN_ENDLESS,               //!< уравнение вида 0*х*х + 0*х + 0 = 0
    WRONG_SOLVING_A,           //!< ошибка в передаче значения первого коэффициента в solving()
    WRONG_SOLVING_B,           //!< ошибка в передаче значения второго коэффициента в solving()
    WRONG_SOLVING_C,           //!< ошибка в передаче значения третьего коэффициента в solving()
    WRONG_SOLVING_X1X2         //!< ошибка в передаче адреса для записи ответа в solving()
};
//! 11 - код ошибки передачи указателя на NULL в get_coefficients
#define NULL_ADDRESS 11
//! 12 - код ошибки передачи одинаковых указателей в get_coefficients
#define SAME_ADDRESS 12
//! 13 - код ошибки при неудачных тестах
#define UNSUCCESS_TEST 13
//! код ошибки при передаче первого неверного значения в result_printing()
#define WRONG_X1_PRINTING 14
//! код ошибки при передаче второго неверного значения в result_printing()
#define WRONG_X2_PRINTING 15

//======================================================================================================================
/*!
 * функция, которая работает с пользователем
 * @return код ошибки
 */
int solve_equations();

/*!
 * Производит ввод данных от пальзователя
 * @param *a, *b, *c указатели на адреса коэффициентов
 * @return код ошибки(при наличии)
 */
int get_coefficients(double *a, double *b, double *c);

/*!
 * Выводит результаты пользователю, если приложение сработало без ошибок
 * @param switch_code код ответа
 * @param x1 значение х1
 * @param x2 значение x2
 * @return код ошибки(при наличии)
 */
int result_printing(int, double, double);

//======================================================================================================================
/*!
 * Выполняет запуск теста
 * /return код ошибки
 *
 *
 */
int test_solving();

//! объявление структуры, в которой будут входные данные
struct test_arr{
    double a;
    double b;
    double c;
};

//! объявление структуры, в которой будут храниться правильные ответы
struct get_ans{
    double x1;
    double x2;
    int ans_code; // код ответа
};

//! объявление структуры, в которой будут храниться правильные ответы на тесты
struct exp_ans{
    double x1;
    double x2;
    int ans_code; // код ответа
};

//======================================================================================================================
// функции, задействованные и тестировщиком, и пользовательским приложением
/*!
 * решает уравнения
 * @param a первый коэффициент
 * @param b второй коэффициент
 * @param c третий коэффициент
 * @param x1 указатель на первый ответ
 * @param x2 указатель на второй ответ
 * @return код ответа или код ошибки
 */
int solving(double a, double b, double c, double *x1, double *x2);

/*!
 * решает квадратное уравнение
 * @param a первый коэффициент
 * @param b второй коэффициент
 * @param c третий коэффициент
 * @param x1 указатель на первый ответ
 * @param x2 указатель на второй ответ
 * @return код ответа
 */
static int solving_quadratic(double a, double b, double c, double *x1, double *x2);

/*!
 * решает линейные уравнения
 * @param b первый коэффициент
 * @param c свободный коэффициент
 * @param x указатель на ответ
 * @return код ответа или код ошибки
 */
static int solving_lin(double b, double c, double *x);

//======================================================================================================================
/*!
 * проверяет равенство значений с учетом погрешности
 * @param a первое сравниваемое значение
 * @param b второе сравниваемое значение
 * @param err_rate погрешность
 * @return равны ли значения
 */
int equal_with_error(double a, double b, double err_rate);

//======================================================================================================================
/*!
 * выводит ошибку, если передан ее код
 */
void print_error(int);

#endif //KVADRIK_KVADRIK_HEADER_H